[
    {
        "id": "ada0a4a67bca5db5",
        "type": "comment",
        "z": "706bdd3f3f20c07c",
        "name": " Dans-TotSirocco-7B Embeddings",
        "info": "",
        "x": 810,
        "y": 620,
        "wires": []
    },
    {
        "id": "853e374da27d1f6f",
        "type": "comment",
        "z": "706bdd3f3f20c07c",
        "name": "cwd = UserDir",
        "info": "",
        "x": 1170,
        "y": 620,
        "wires": []
    },
    {
        "id": "2f48938d9983ed5f",
        "type": "http in",
        "z": "706bdd3f3f20c07c",
        "name": "[get] /dans-totsirocco-embeddings",
        "url": "/dans-totsirocco-embeddings",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 820,
        "y": 680,
        "wires": [
            [
                "333b47ed17b82ad0"
            ]
        ]
    },
    {
        "id": "4f86686802338bd3",
        "type": "function",
        "z": "706bdd3f3f20c07c",
        "name": "Dans-TotSirocco Embeddings",
        "func": "(async () => {\n  let Prompt = (msg.payload || '').trim()\n  if (Prompt === '') {\n    msg.payload = 'empty or missing prompt'\n    node.send([null, msg])\n    node.done()\n    return\n  }\n\n  /**** retrieve settings or provide defaults ****/\n\n  let Seed = parseInt(msg.seed, 10)\n  if (isNaN(Seed)) { Seed = -1 }\n\n  let Threads = parseInt(msg.threads, 10)\n  if (isNaN(Threads)) { Threads = 4 }\n  Threads = Math.max(1, Threads)\n  Threads = Math.min(Threads, Math.max(1, os.cpus().length))\n\n  let ContextLength = parseInt(msg.context, 10)\n  if (isNaN(ContextLength)) { ContextLength = 512 }\n  ContextLength = Math.max(0, Math.min(ContextLength, 2048))\n\n  Prompt = Prompt.replace(/\"/g, '\\\\\"')\n\n  /**** retrieve UserDir - crash if not a folder ****/\n\n  let UserDir = (global.get('UserDir') || '').trim()\n  if (UserDir === '') { UserDir = process.env.HOME + '/.node-red' }\n\n  if (!fs.statSync(UserDir, { throwIfNoEntry: false })?.isDirectory()) {\n    throw new Error(\n      'the given \"UserDir\" (\"' + UserDir + '\") is either missing or ' +\n      'not a folder - exiting'\n    )\n  }\n\n  /**** combine all these settings into a command ****/\n\n  let Command = ('cd \"' + UserDir + '\" && ' +\n    './llama-embeddings --model ./dans-totsirocco-7b.Q5_K_M.gguf --mlock ' +\n    ' --ctx_size ' + ContextLength +\n    ' --threads ' + Threads +\n    ' --seed ' + Seed +\n    ' --prompt \"' + encoded(Prompt) + '\"'\n  )\n  const Options = {\n    cwd: UserDir\n  }\n\n  /**** extract actual reponse from command output ****/\n\n  function ResponseFrom(Text) {\n    let HeaderLength = Text.indexOf('system_info')\n    Text = Text.slice(HeaderLength + 1)\n      .replace(/^[^\\n]*\\n/, '')\n\n    let TrailerIndex = Text.indexOf('\\n\\nllama_print_timings')\n    Text = Text.slice(0, TrailerIndex)\n\n    return Text\n  }\n\n  /**** now calculate embeddings for the given prompt ****/\n\n  node.status({ fill: 'yellow', shape: 'ring', text: 'running' })\n\n  const ShellProcess = child_process.exec(Command, Options)\n  let stdout = ''\n  for await (const Chunk of ShellProcess.stdout) {\n    stdout += Chunk\n  }\n\n  let stderr = ''\n  for await (const Chunk of ShellProcess.stderr) {\n    stderr += Chunk\n  }\n\n  const ExitCode = (await new Promise((resolve) => {\n    ShellProcess.on('close', resolve)\n  })) || 0\n  if (ExitCode !== 0) {\n    node.status({ fill: 'red', shape: 'dot', text: 'ExitCode = ' + ExitCode })\n\n    msg.statusCode = 500 + ExitCode\n    msg.payload = stderr\n  } else {\n    node.status({ fill: 'green', shape: 'dot', text: 'finished' })\n\n    stdout = stdout.trim()\n\n    msg.statusCode = (stdout === '' ? 204 : 200)\n    msg.payload = ResponseFrom(stdout)\n  }\n\n  node.send([msg, null])\n  node.done()\n\n  /**** encoded ****/\n\n  function encoded(Text) {\n    return Text.replace(/'/g, \"'\\\"'\\\"'\")\n  }\n})()\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            },
            {
                "var": "child_process",
                "module": "child_process"
            },
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "process",
                "module": "process"
            }
        ],
        "x": 1010,
        "y": 740,
        "wires": [
            [
                "c0a4252bf31dd9c8",
                "b2577deb9a7695cf"
            ],
            [
                "e98d52e58cbe4822"
            ]
        ],
        "outputLabels": [
            "on success",
            "on failure"
        ]
    },
    {
        "id": "23ba4ba6c8df2c74",
        "type": "debug",
        "z": "706bdd3f3f20c07c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "'Prompt: \"' & msg.payload & '\"'",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 800,
        "wires": []
    },
    {
        "id": "84c6b78f415a9b95",
        "type": "http response",
        "z": "706bdd3f3f20c07c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1190,
        "y": 680,
        "wires": []
    },
    {
        "id": "e98d52e58cbe4822",
        "type": "change",
        "z": "706bdd3f3f20c07c",
        "name": "400",
        "rules": [
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "400",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1190,
        "y": 780,
        "wires": [
            [
                "84c6b78f415a9b95"
            ]
        ]
    },
    {
        "id": "c0a4252bf31dd9c8",
        "type": "change",
        "z": "706bdd3f3f20c07c",
        "name": "200",
        "rules": [
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "200",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1190,
        "y": 740,
        "wires": [
            [
                "84c6b78f415a9b95"
            ]
        ]
    },
    {
        "id": "b2577deb9a7695cf",
        "type": "debug",
        "z": "706bdd3f3f20c07c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "'Response: \"' & msg.payload & '\"'",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 820,
        "wires": []
    },
    {
        "id": "333b47ed17b82ad0",
        "type": "change",
        "z": "706bdd3f3f20c07c",
        "name": "parse query",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.query.prompt",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "seed",
                "pt": "msg",
                "to": "req.query.seed",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "threads",
                "pt": "msg",
                "to": "req.query.threads",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "model",
                "pt": "msg",
                "to": "req.query.model",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "context",
                "pt": "msg",
                "to": "req.query.context",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 740,
        "wires": [
            [
                "23ba4ba6c8df2c74",
                "4f86686802338bd3"
            ]
        ]
    }
]